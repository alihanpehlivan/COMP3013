{"version":3,"sources":["index.js"],"names":["width","window","innerWidth","height","innerHeight","isOnScreen","stage","Konva","Stage","container","style","backgroundColor","border","box","layer","Layer","document","getElementById","addEventListener","uri","name","link","createElement","download","href","body","appendChild","click","removeChild","Export","toDataURL","pixelRatio","tr","Transformer","squareTr","arrowTr","key","keyCode","alert","destroy","add","buttonRectangle","onClick","Rectangle","Rect","x","y","fill","stroke","strokeWidth","draggable","shadowBlur","cornerRadius","nodes","color","fontWeight","ReactDOM","render","buttonCircle","Circle","radius","strokewidth","buttonArrow","arrow","Arrow","points","pointerLength","pointerWidth","squarebutton","Square","textButton","text","Text","fontSize","fontFamily","lineButton","line","Line","lineCap","lineJoin","exportButton","buttonDraw"],"mappings":"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","file":"static/js/main.682bfbde.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM, { createPortal } from 'react-dom';\n//import style from './Button.css';\nimport Konva from 'konva';\nimport { Transformer } from 'konva/lib/shapes/Transformer';\n\n\n\nvar width = window.innerWidth / 1;\nvar height = window.innerHeight / 1.7;\n\nvar isOnScreen = false;\n\nvar stage = new Konva.Stage\n(\n  {\n    container: 'container',\n    width: width,\n    height: height,\n  }\n);\n\nstage.container().style.backgroundColor = 'white';\nstage.container().style.border = '2px solid black';\n\nvar layer = new Konva.Layer();\n\nvar box;\n\nfunction Export(uri, name)\n{\n  var link = document.createElement('a');\n  link.download = name;\n  link.href = uri;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n}\n\ndocument.getElementById('export').addEventListener('click', function()\n{\n  var dataToURL = stage.toDataURL({pixelRatio: 2});\n  Export(dataToURL, 'diagram.png');\n})\n\n\nvar tr = new Konva.Transformer();\nvar squareTr = new Konva.Transformer();\nvar arrowTr = new Konva.Transformer();\n\n\nfunction DrawRectangle()\n{\n  var Rectangle = new Konva.Rect({\n    x: 150,\n    y: 40,\n    width: 200,\n    height: 50,\n    fill: 'white',\n    stroke: 'black',\n    strokeWidth: 4,\n    draggable : true,\n    shadowBlur: 10,\n    cornerRadius: 10,\n  });\n  box = Rectangle;\n  isOnScreen = true;\n  layer.add(Rectangle);\n\n  tr = new Konva.Transformer();\n      layer.add(tr);\n      tr.nodes([box]);\n}\n\n\n\nfunction setRectangleColour()\n{\n  if(isOnScreen)\n  {\n    var fill = box.fill() == 'red' ? '00d00f': 'red';\n    box.fill(fill);\n  }\n  else\n  {\n    return;\n  }\n}\n\nfunction DrawCircle()\n{\n  var Circle = new Konva.Circle(\n  {\n    x: stage.width() / 2,\n    y: stage.height() / 2,\n    radius: 70,\n    fill: 'white',\n    stroke: 'black',\n    strokewidth: 4,\n    draggable: true\n\n  });\n  layer.add(Circle);\n\n}\n\nfunction DrawArrow()\n{\n  var arrow = new Konva.Arrow(\n    {\n      x: stage.width() / 4,\n      y: stage.height() / 4,\n      //points: [0, 0, width / 6, height / 6],\n      points: [25, 25, 120, 25],\n      pointerLength: 4,\n      pointerWidth: 4,\n      fill: 'black',\n      stroke: 'black',\n      strokeWidth: 8,\n      draggable: true,\n    }\n  );\n\n  arrowTr = new Konva.Transformer();\n    layer.add(arrowTr);\n    arrowTr.nodes([arrow]);\n\n  layer.add(arrow);\n}\n\nfunction DrawSquare()\n{\n  var Square = new Konva.Rect({\n    x: 150,\n    y: 40,\n    width: 100,\n    height: 100,\n    fill: 'white',\n    stroke: 'black',\n    strokeWidth: 4,\n    draggable : true,\n    shadowBlur: 10,\n    cornerRadius: 10,\n  });\n  squareTr = new Konva.Transformer();\n  layer.add(squareTr);\n  squareTr.nodes([Square]);\n  layer.add(Square);\n\n}\n\nfunction drawText()\n{\n  var text = new Konva.Text(\n  {\n    x: stage.width() / 2,\n    y: 15,\n    text: 'text',\n    fontSize: 40,\n    fontFamily: 'Arial',\n    fill: 'black',\n    draggable: true\n  })\n\n  layer.add(text);\n\n}\n\ndocument.addEventListener('keypress', function(key)\n{\n  if(key.keyCode == 13){\n    alert(\"You pressed Enter\");\n    tr.destroy();\n  }\n\n  if(key.keyCode == 97){\n    alert(\"You pressed A\");\n    arrowTr.destroy();\n  }\n\n  if(key.keyCode == 98){\n    alert(\"You pressed B\")\n    squareTr.destroy();\n  }\n\n})\n\nfunction drawLine()\n{\n  var line = new Konva.Line(\n    {\n      x: stage.width() / 2,\n      y: 15,\n      points: [25, 25, 250, 25],\n        stroke: 'black',\n        strokeWidth: 5,\n        lineCap: 'round',\n        lineJoin: 'round',\n        draggable: true\n    }\n  )\n\n  layer.add(line);\n\n}\n\nstage.add(layer);\n\nconst buttonRectangle = <button onClick={DrawRectangle} style={{backgroundColor:\"orange\", color:\"black\", fontWeight:'bold'}}>RECTANGLE</button>\nReactDOM.render(buttonRectangle, document.getElementById('root'));\nconst buttonCircle = <button onClick={DrawCircle} style={{backgroundColor:\"orange\", color:\"black\", fontWeight:'bold'}}>CIRCLE</button>\nReactDOM.render(buttonCircle, document.getElementById('circle'));\nconst buttonArrow = <button onClick={DrawArrow} style={{backgroundColor:\"orange\", color:\"black\", fontWeight:'bold'}}>ARROW</button>\nReactDOM.render(buttonArrow, document.getElementById('arrow'));\n\nconst squarebutton = <button onClick={DrawSquare} style={{backgroundColor:\"orange\", color:\"black\", fontWeight:'bold'}}>SQUARE</button>\nReactDOM.render(squarebutton, document.getElementById('square'));\n\nconst textButton = <button onClick={drawText} style={{backgroundColor:\"orange\", color:\"black\", fontWeight:'bold'}}>TEXT</button>\nReactDOM.render(textButton, document.getElementById('text'));\nconst lineButton = <button onClick={drawLine} style={{backgroundColor:\"orange\", color:\"black\", fontWeight:'bold'}}>LINE</button>\nReactDOM.render(lineButton, document.getElementById('line'));\n\nconst exportButton = <button style={{backgroundColor:\"cyan\", color:\"black\", fontWeight:'bold'}}>EXPORT</button>\nReactDOM.render(exportButton, document.getElementById('export'));\n\nconst buttonDraw = <button onClick={setRectangleColour} style={{backgroundColor:\"yellow\", color:\"black\", fontWeight:'bold'}}>SET RECTANGLE COLOUR</button>\nReactDOM.render(buttonDraw, document.getElementById('draw'));\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}